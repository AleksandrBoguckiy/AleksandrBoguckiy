{"version":3,"sources":["api/todoLists-api.ts","reportWebVitals.ts","features/TodoListsList/TodoList/todolists-reducer.ts","features/TodoListsList/TodoList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan.tsx","features/TodoListsList/TodoList/Task/Task.tsx","features/TodoListsList/TodoList/TodoList.tsx","features/TodoListsList/TodoListsList.tsx","app/App.tsx","app/store.ts","index.tsx","app/App.module.css"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todoListsApi","get","todoListTitle","post","title","todoListId","delete","put","taskTitle","taskId","model","initialState","updateTaskTC","todoListID","domainModel","dispatch","getState","task","tasks","find","t","id","apiModel","startDate","priority","deadline","description","status","type","updateTaskAC","console","log","AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","error","setError","onClickHandler","trim","addItem","TextField","value","onChange","e","currentTarget","onKeyPress","key","variant","size","helperText","label","IconButton","color","onClick","PostAdd","fontSize","EditableSpan","titleTdl","changeTitle","editMode","setEditMode","setTitle","offEditMode","onBlur","autoFocus","onDoubleClick","Task","removeTask","changeTaskTitle","changeTaskStatus","changeTaskTitleHandler","useCallback","Delete","Checkbox","checked","Completed","New","className","s","isDone","TodoList","changeTodoListFilter","addTask","changeTodoListTitle","removeTodoList","filter","useDispatch","useEffect","res","setTasksAC","data","items","fetchTasksTC","tasksForTodolist","TaskJSXElements","map","onClickHandlerAll","onClickHandlerActive","onClickHandlerCompleted","addTaskInTodoList","changeTodolistTitle","style","listStyle","paddingLeft","Button","margin","TodoListsList","todoLists","useSelector","state","taskID","removeTaskAC","removeTaskTC","item","addTaskTC","newTitle","removeTodoListAC","removeTodoListTC","addTodoList","todoList","filterValue","changeTodolistFilterAC","changeTodoListTitleAC","changeTodoListTitleTC","todoListsComponents","tdl","Grid","Paper","padding","elevation","container","spacing","App","app","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","rootReducer","combineReducers","action","stateCopy","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5e55107a.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e48f586f-eae5-4a76-8ed1-bdd525d79043'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todoListsApi = {\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoListType>>(`todo-lists`)\r\n    },\r\n    createTodoList(todoListTitle: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>(`todo-lists`, {title: todoListTitle})\r\n    },\r\n    deleteTodoList(todoListId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}`)\r\n    },\r\n    updateTodoList(todoListId: string, todoListTitle: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todoListId}`, {title: todoListTitle})\r\n    },\r\n    getTasks(todoListId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`)\r\n    },\r\n    createTask(todoListId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todoListId}/tasks`, {title: taskTitle})\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todoListId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put(`todo-lists/${todoListId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate?: string\r\n    order?: number\r\n    title: string\r\n}\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: string\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from \"redux\";\r\nimport {todoListsApi, TodoListType} from \"../../../api/todoLists-api\";\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodoListDomainType> = initialState, action: TodoListsActionsType): Array<TodoListDomainType> => {\r\n\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tdl => tdl.id !== action.todoListID)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todoList, filter: \"All\"}, ...state]\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tdl => tdl.id === action.todoListID ? {...tdl, filter: action.filterValue} : tdl)\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tdl => tdl.id === action.todoListID ? {...tdl, title: action.newTitle} : tdl)\r\n        case \"SET-TODOLISTS\":\r\n            return action.todoLists.map(tdl => ({...tdl, filter: \"All\"}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodoListAC = (todoListID: string) =>\r\n    ({type: 'REMOVE-TODOLIST', todoListID} as const)\r\nexport const addTodoListAC = (todoList: TodoListType) =>\r\n    ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const changeTodolistFilterAC = (filterValue: FilterValuesType, todoListID: string) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', filterValue, todoListID} as const)\r\nexport const changeTodoListTitleAC = (newTitle: string, todoListID: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', newTitle, todoListID} as const)\r\nexport const setTodoListsAC = (todoLists: Array<TodoListType>) =>\r\n    ({type: 'SET-TODOLISTS', todoLists} as const)\r\n\r\n// thunks\r\nexport const fetchTodoListsTC = () => (dispatch: Dispatch<TodoListsActionsType>) => {\r\n    todoListsApi.getTodoLists()\r\n        .then((res) => {\r\n            dispatch(setTodoListsAC(res.data))\r\n        })\r\n}\r\nexport const addTodoListTC = (todoListTitle: string) => (dispatch: Dispatch<TodoListsActionsType>) => {\r\n    todoListsApi.createTodoList(todoListTitle)\r\n        .then((res) => {\r\n            dispatch(addTodoListAC(res.data.data.item))\r\n        })\r\n}\r\nexport const removeTodoListTC = (todoListID: string) => (dispatch: Dispatch<TodoListsActionsType>) => {\r\n    todoListsApi.deleteTodoList(todoListID)\r\n        .then(() => {\r\n            dispatch(removeTodoListAC(todoListID))\r\n        })\r\n}\r\nexport const changeTodoListTitleTC = (todoListID: string, todoListTitle: string) => (dispatch: Dispatch<TodoListsActionsType>) => {\r\n    todoListsApi.updateTodoList(todoListID, todoListTitle)\r\n        .then(() => {\r\n            dispatch(changeTodoListTitleAC(todoListTitle, todoListID))\r\n        })\r\n}\r\n\r\n// types\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed';\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n}\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoListAC>\r\nexport type AddTodoListActionType = ReturnType<typeof addTodoListAC>\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\ntype TodoListsActionsType =\r\n    | RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | SetTodoListsActionType","import {AddTodoListActionType, RemoveTodoListActionType, SetTodoListsActionType} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todoListsApi, UpdateTaskModelType} from \"../../../api/todoLists-api\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todoListID]: state[action.todoListID].filter(task => task.id !== action.taskId)};\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]};\r\n        case \"UPDATE-TASK\":\r\n            return {...state, [action.todoListID]: state[action.todoListID].map(\r\n                    task => task.id === action.taskId ? {...task, ...action.model} : task)};\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todoList.id]: []};\r\n        case \"REMOVE-TODOLIST\":\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListID]\r\n            return stateCopy;\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todoLists.forEach(tdl => stateCopy[tdl.id] = [])\r\n            return stateCopy;\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todoListID]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todoListID: string) =>\r\n    ({type: 'REMOVE-TASK', todoListID, taskId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListID: string) =>\r\n    ({type: 'UPDATE-TASK', taskId, model, todoListID} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todoListID: string) =>\r\n    ({type: 'SET-TASKS', tasks, todoListID} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todoListID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todoListsApi.getTasks(todoListID)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todoListID))\r\n        })\r\n}\r\nexport const removeTaskTC = (todoListID: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todoListsApi.deleteTask(todoListID, taskId)\r\n        .then(() => {\r\n            dispatch(removeTaskAC(taskId, todoListID))\r\n        })\r\n}\r\nexport const addTaskTC = (todoListID: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todoListsApi.createTask(todoListID, title)\r\n        .then((res) => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n}\r\nexport const updateTaskTC = (todoListID: string, taskId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n    const allTasksFromState = getState().tasks\r\n    const tasksForCurrentTodoList = allTasksFromState[todoListID]\r\n    const task = tasksForCurrentTodoList.find(t => t.id === taskId)\r\n    if (!task) {\r\n        console.log('tasks not found in the state')\r\n        return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        title: task.title,\r\n        startDate: task.startDate,\r\n        priority: task.priority,\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        status: task.status,\r\n        ...domainModel\r\n    }\r\n\r\n    todoListsApi.updateTask(todoListID, taskId, apiModel)\r\n        .then(() => {\r\n            dispatch(updateTaskAC(taskId, domainModel, todoListID))\r\n        })\r\n}\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodoListsActionType\r\n    | ReturnType<typeof setTasksAC>","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {PostAdd} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (newTaskTitle: string) => void\r\n}\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo((props) => {\r\n\r\n        const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n        const [error, setError] = useState<string | null>(null)\r\n\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setNewTaskTitle(e.currentTarget.value)\r\n        }\r\n\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (error !== null) {\r\n                setError(null)\r\n            }\r\n            if (e.key === 'Enter') {\r\n                onClickHandler()\r\n            }\r\n        }\r\n\r\n        const onClickHandler = () => {\r\n            if (newTaskTitle.trim() !== '') {\r\n                props.addItem(newTaskTitle.trim())\r\n                setNewTaskTitle('')\r\n            } else {\r\n                setError('Title is required')\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <TextField value={newTaskTitle}\r\n                           onChange={onChangeHandler}\r\n                           onKeyPress={onKeyPressHandler}\r\n                           variant={'outlined'}\r\n                           size={'small'}\r\n                           error={!!error}\r\n                           helperText={error && 'Title is required'}\r\n                           label={'Title'}/>\r\n                <IconButton size={'small'}\r\n                            color={'primary'}\r\n                            onClick={onClickHandler}>\r\n                    <PostAdd fontSize={'large'}/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n)","import {TextField} from \"@material-ui/core\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    titleTdl: string\r\n    changeTitle: (title: string) => void\r\n}\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((props) => {\r\n\r\n        const {\r\n            titleTdl,\r\n            changeTitle,\r\n        } = props\r\n        const [editMode, setEditMode] = useState<boolean>(false);\r\n        const [title, setTitle] = useState<string>(titleTdl)\r\n\r\n        const onEditMode = () => setEditMode(true)\r\n        const offEditMode = () => {\r\n            title ? changeTitle(title) : setTitle(titleTdl)\r\n            setEditMode(false)\r\n        }\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setTitle(e.currentTarget.value)\r\n        }\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === 'Enter') {\r\n                offEditMode();\r\n            }\r\n        }\r\n\r\n        return (\r\n            editMode\r\n                ? <TextField value={title}\r\n                             onChange={onChangeHandler}\r\n                             onBlur={offEditMode}\r\n                             onKeyPress={onKeyPressHandler}\r\n                             autoFocus/>\r\n                : <span onDoubleClick={onEditMode}>{titleTdl}</span>\r\n        )\r\n    }\r\n)","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport s from \"../../../../app/App.module.css\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todoLists-api\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todoListID: string) => void\r\n    todoListID: string\r\n    task: TaskType\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\r\n\r\n    const {\r\n        removeTask,\r\n        changeTaskTitle,\r\n        changeTaskStatus,\r\n        todoListID,\r\n        task,\r\n    } = props\r\n\r\n    const onClickHandler = () => removeTask(task.id, todoListID)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        changeTaskStatus(task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todoListID)\r\n    }\r\n\r\n    const changeTaskTitleHandler = useCallback((title: string) => {\r\n        changeTaskTitle(task.id, title, todoListID)\r\n    }, [changeTaskTitle, task.id, todoListID])\r\n\r\n    return (\r\n        <li key={task.id}>\r\n            <IconButton size={'small'}\r\n                        color={'secondary'}\r\n                        onClick={onClickHandler}>\r\n                <Delete fontSize={'small'}/>\r\n            </IconButton>\r\n            <Checkbox checked={props.task.status === TaskStatuses.Completed}\r\n                      onChange={onChangeHandler}\r\n                      size={'small'}\r\n                      color={'primary'}/>\r\n            <span className={task.status === TaskStatuses.Completed ? s.isDone : ''}>\r\n                        <EditableSpan titleTdl={task.title} changeTitle={changeTaskTitleHandler}/>\r\n                    </span>\r\n        </li>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todoLists-api\";\r\nimport {FilterValuesType} from \"./todolists-reducer\";\r\n\r\nexport type TodoListPropsType = {\r\n    titleTdl: string\r\n    tasks: Array<TaskType>\r\n    changeTodoListFilter: (filterValue: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTodoListTitle: (newTitle: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    filter: FilterValuesType\r\n    todoListID: string\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListPropsType> = React.memo((props) => {\r\n\r\n        const {\r\n            titleTdl,\r\n            tasks,\r\n            changeTodoListFilter,\r\n            addTask,\r\n            changeTodoListTitle,\r\n            removeTask,\r\n            changeTaskTitle,\r\n            changeTaskStatus,\r\n            removeTodoList,\r\n            filter,\r\n            todoListID,\r\n        } = props\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(todoListID))\r\n    }, [dispatch, todoListID])\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (filter === \"Active\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (filter === \"Completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n        const TaskJSXElements = tasksForTodolist.map(t =>\r\n            <Task removeTask={removeTask}\r\n                  changeTaskTitle={changeTaskTitle}\r\n                  changeTaskStatus={changeTaskStatus}\r\n                  todoListID={todoListID}\r\n                  task={t}\r\n                  key={t.id}/>\r\n        )\r\n\r\n        const onClickHandlerAll = useCallback(() => {\r\n            changeTodoListFilter(\"All\", todoListID)\r\n        }, [changeTodoListFilter, todoListID])\r\n\r\n        const onClickHandlerActive = useCallback(() => {\r\n            changeTodoListFilter(\"Active\", todoListID)\r\n        }, [changeTodoListFilter, todoListID])\r\n\r\n        const onClickHandlerCompleted = useCallback(() => {\r\n            changeTodoListFilter(\"Completed\", todoListID)\r\n        }, [changeTodoListFilter, todoListID])\r\n\r\n        const onClickHandlerRemoveTodoList = () => {\r\n            removeTodoList(todoListID)\r\n        }\r\n\r\n        const addTaskInTodoList = useCallback((title: string) => {\r\n            addTask(title, todoListID)\r\n        }, [addTask, todoListID])\r\n\r\n        const changeTodolistTitle = useCallback((title: string) => {\r\n            changeTodoListTitle(title, todoListID)\r\n        }, [changeTodoListTitle, todoListID])\r\n\r\n        return (\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan titleTdl={titleTdl} changeTitle={changeTodolistTitle}/>\r\n                    <IconButton size={'small'}\r\n                                color={'inherit'}\r\n                                onClick={onClickHandlerRemoveTodoList}>\r\n                        <Delete fontSize={'medium'}/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTaskInTodoList}/>\r\n                <ul style={{listStyle: 'none', paddingLeft: '0'}}>\r\n                    {TaskJSXElements}\r\n                </ul>\r\n                <Button variant={\"contained\"}\r\n                        size={\"small\"}\r\n                        color={filter === 'All' ? 'primary' : 'secondary'}\r\n                        onClick={onClickHandlerAll}>All</Button>\r\n                <Button variant={\"contained\"}\r\n                        size={\"small\"}\r\n                        color={filter === 'Active' ? 'primary' : 'secondary'}\r\n                        style={{margin: '0 3px'}}\r\n                        onClick={onClickHandlerActive}>Active</Button>\r\n                <Button variant={\"contained\"}\r\n                        size={\"small\"}\r\n                        color={filter === 'Completed' ? 'primary' : 'secondary'}\r\n                        onClick={onClickHandlerCompleted}>Completed</Button>\r\n            </div>\r\n        );\r\n    }\r\n)\r\n\r\n","import {\r\n    addTodoListTC,\r\n    changeTodolistFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodoListTC\r\n} from \"./TodoList/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"./TodoList/tasks-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {TaskStatuses} from \"../../api/todoLists-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {TodoList} from \"./TodoList/TodoList\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\n\r\nexport const TodoListsList = () => {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodoListsTC())\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTaskTC(todoListID, taskID))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskTC(todoListID, title))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, status: TaskStatuses, todoListID: string) => {\r\n        dispatch(updateTaskTC(todoListID, taskID, {status}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskID: string, newTitle: string, todoListID: string) => {\r\n        dispatch(updateTaskTC(todoListID, taskID, {title: newTitle}))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        dispatch(removeTodoListTC(todoListID))\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((newTitle: string) => {\r\n        dispatch(addTodoListTC(newTitle))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListFilter = useCallback((filterValue: FilterValuesType, todoListID: string) => {\r\n        dispatch(changeTodolistFilterAC(filterValue, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string, todoListID: string) => {\r\n        dispatch(changeTodoListTitleTC(todoListID, newTitle))\r\n    }, [dispatch])\r\n\r\n    const todoListsComponents = todoLists.map(tdl => {\r\n\r\n        let tasksForTodolist = tasks[tdl.id];\r\n\r\n        return (\r\n            <Grid item key={tdl.id}>\r\n                <Paper style={{padding: '20px'}} elevation={5}>\r\n                    <TodoList\r\n                        key={tdl.id}\r\n                        todoListID={tdl.id}\r\n                        titleTdl={tdl.title}\r\n                        filter={tdl.filter}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                        changeTaskTitle={changeTaskTitle}/>\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px 0'}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={5}>\r\n                {todoListsComponents}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}","import React from 'react';\r\nimport s from './App.module.css';\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TodoListsList} from \"../features/TodoListsList/TodoListsList\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className={s.app}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodoListsList/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"../features/TodoListsList/TodoList/tasks-reducer\";\r\nimport {todoListsReducer} from \"../features/TodoListsList/TodoList/todolists-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./app/App\";\nimport {Provider} from \"react-redux\";\nimport { store } from './app/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"App_isDone__Haoe4\"};"],"sourceRoot":""}