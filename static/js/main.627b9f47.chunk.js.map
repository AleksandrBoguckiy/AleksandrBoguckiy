{"version":3,"sources":["App.module.css","reportWebVitals.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan.tsx","Todolist.tsx","store/todolists-reducer.ts","store/tasks-reducer.ts","AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","onClickHandler","trim","addItem","TextField","value","onChange","e","currentTarget","onKeyPress","key","variant","size","helperText","label","IconButton","color","onClick","PostAdd","fontSize","EditableSpan","editMode","setEditMode","title","setTitle","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","Todolist","TaskJSXElements","tasks","map","t","removeTask","id","todoListID","Delete","Checkbox","checked","isDone","changeTaskStatus","className","s","changeTaskTitle","changeTodoListTitle","removeTodoList","addTask","style","listStyle","paddingLeft","Button","filter","changeTodoListFilter","margin","initialState","AppWithRedux","todoLists","useSelector","state","dispatch","useDispatch","taskID","taskId","type","removeTaskActionCreator","newTitle","addTaskActionCreator","newIsDone","changeTaskStatusActionCreator","changeTaskTitleActionCreator","removeTodoListActionCreator","filterValue","changeTodolistFilterActionCreator","changeTodoListTitleActionCreator","todoListsComponents","tdl","tasksForTodolist","Grid","item","Paper","padding","elevation","app","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","action","v1","addTodoListActionCreator","spacing","rootReducer","combineReducers","task","newTask","stateCopy","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.627b9f47.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"App_isDone__1PHS-\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {PostAdd} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (newTaskTitle: string) => void\r\n}\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = (props) => {\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === 'Enter') {\r\n            onClickHandler()\r\n        }\r\n    }\r\n\r\n    const onClickHandler = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addItem(newTaskTitle.trim())\r\n            setNewTaskTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField value={newTaskTitle}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       variant={'outlined'}\r\n                       size={'small'}\r\n                       error={!!error}\r\n                       helperText={error && 'Title is required'}\r\n                       label={'Title'}/>\r\n            <IconButton size={'small'}\r\n                        color={'primary'}\r\n                        onClick={onClickHandler}>\r\n                <PostAdd fontSize={'large'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import {TextField} from \"@material-ui/core\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        title ? props.changeTitle(title) : setTitle(props.title)\r\n        setEditMode(false)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField value={title}\r\n                         onChange={onChangeHandler}\r\n                         onBlur={offEditMode}\r\n                         onKeyPress={onKeyPressHandler}\r\n                         autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\r\nimport s from './App.module.css'\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TodoListPropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeTodoListFilter: (filterValue: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, newIsDone: boolean, todoListID: string) => void\r\n    changeTodoListTitle: (newTitle: string, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    filter: FilterValuesType\r\n    todoListID: string\r\n}\r\n\r\nexport const Todolist: React.FC<TodoListPropsType> = (props) => {\r\n\r\n    const TaskJSXElements = props.tasks.map(t => {\r\n            const removeTask = () => props.removeTask(t.id, props.todoListID)\r\n            const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)\r\n            }\r\n            const changeTaskTitleHandler = (title: string) => {\r\n                props.changeTaskTitle(t.id, title, props.todoListID)\r\n            }\r\n            return (\r\n                <li key={t.id}>\r\n                    <IconButton size={'small'}\r\n                                color={'secondary'}\r\n                                onClick={removeTask}>\r\n                        <Delete fontSize={'small'}/>\r\n                    </IconButton>\r\n                    <Checkbox checked={t.isDone}\r\n                              onChange={onChangeHandler}\r\n                              size={'small'}\r\n                              color={'primary'}/>\r\n                    <span className={t.isDone ? s.isDone : ''}>\r\n                        <EditableSpan title={t.title} changeTitle={changeTaskTitleHandler}/>\r\n                    </span>\r\n                </li>\r\n            )\r\n        }\r\n    )\r\n\r\n    const onClickHandlerAll = () => {\r\n        props.changeTodoListFilter(\"All\", props.todoListID)\r\n    }\r\n    const onClickHandlerActive = () => {\r\n        props.changeTodoListFilter(\"Active\", props.todoListID)\r\n    }\r\n    const onClickHandlerCompleted = () => {\r\n        props.changeTodoListFilter(\"Completed\", props.todoListID)\r\n    }\r\n    const onClickHandlerRemoveTodoList = () => {\r\n        props.removeTodoList(props.todoListID)\r\n    }\r\n    const addTask = (title: string) => props.addTask(title, props.todoListID)\r\n    const changeTodolistTitle = (title: string) => props.changeTodoListTitle(title, props.todoListID)\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\r\n                <IconButton size={'small'}\r\n                            color={'inherit'}\r\n                            onClick={onClickHandlerRemoveTodoList}>\r\n                    <Delete fontSize={'medium'}/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle: 'none', paddingLeft: '0'}}>\r\n                {TaskJSXElements}\r\n            </ul>\r\n            <Button variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    color={props.filter === 'All' ? 'primary' : 'secondary'}\r\n                    onClick={onClickHandlerAll}>All</Button>\r\n            <Button variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    color={props.filter === 'Active' ? 'primary' : 'secondary'}\r\n                    style={{margin: '0 3px'}}\r\n                    onClick={onClickHandlerActive}>Active</Button>\r\n            <Button variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    color={props.filter === 'Completed' ? 'primary' : 'secondary'}\r\n                    onClick={onClickHandlerCompleted}>Completed</Button>\r\n        </div>\r\n    );\r\n}\r\n","import {FilterValuesType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype todoListsActionsType = RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ChangeTodolistFilterActionType\r\n    | ChangeTodoListTitleActionType\r\n\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todoListID: string\r\n}\r\n\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    newTitle: string\r\n    todoListID: string\r\n\r\n}\r\n\r\ntype ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filterValue: FilterValuesType\r\n    todoListID: string\r\n}\r\n\r\ntype ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    newTitle: string\r\n    todoListID: string\r\n}\r\n\r\nconst initialState: Array<TodoListType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: todoListsActionsType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tdl => tdl.id !== action.todoListID)\r\n        case 'ADD-TODOLIST':\r\n            return [{id: action.todoListID, title: action.newTitle, filter: \"All\"}, ...state]\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tdl => tdl.id === action.todoListID ? {...tdl, filter: action.filterValue} : tdl)\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tdl => tdl.id === action.todoListID ? {...tdl, title: action.newTitle} : tdl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodoListActionCreator = (todoListID: string): RemoveTodoListActionType => {\r\n    return {type: 'REMOVE-TODOLIST', todoListID}\r\n}\r\n\r\nexport const addTodoListActionCreator = (newTitle: string): AddTodoListActionType => {\r\n    return {type: 'ADD-TODOLIST', newTitle, todoListID: v1()}\r\n}\r\n\r\nexport const changeTodolistFilterActionCreator = (filterValue: FilterValuesType, todoListID: string): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', filterValue, todoListID}\r\n}\r\n\r\nexport const changeTodoListTitleActionCreator = (newTitle: string, todoListID: string): ChangeTodoListTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', newTitle, todoListID}\r\n}","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType} from \"./todolists-reducer\";\r\n\r\ntype tasksActionsType = RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todoListID: string\r\n    taskId: string\r\n}\r\n\r\ntype AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    newTitle: string\r\n    todoListID: string\r\n}\r\n\r\ntype ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    newIsDone: boolean\r\n    todoListID: string\r\n\r\n}\r\ntype ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    newTitle: string\r\n    todoListID: string\r\n\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: tasksActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID].filter(task => task.id !== action.taskId)\r\n            };\r\n        case 'ADD-TASK':\r\n            const newTask = {id: v1(), title: action.newTitle, isDone: false}\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: [newTask, ...state[action.todoListID]]\r\n            };\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID].map(\r\n                    task => task.id === action.taskId\r\n                        ? {...task, isDone: action.newIsDone}\r\n                        : task)\r\n            };\r\n        case \"CHANGE-TASK-TITLE\":\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID].map(\r\n                    task => task.id === action.taskId\r\n                        ? {...task, title: action.newTitle}\r\n                        : task)\r\n            };\r\n        case \"ADD-TODOLIST\":\r\n            return {\r\n                ...state, [action.todoListID]: []\r\n            };\r\n        case \"REMOVE-TODOLIST\":\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListID]\r\n            return stateCopy\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskActionCreator = (taskId: string, todoListID: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', todoListID, taskId}\r\n}\r\n\r\nexport const addTaskActionCreator = (newTitle: string, todoListID: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', newTitle, todoListID}\r\n}\r\n\r\nexport const changeTaskStatusActionCreator = (taskId: string, newIsDone: boolean, todoListID: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, newIsDone, todoListID}\r\n}\r\nexport const changeTaskTitleActionCreator = (taskId: string, newTitle: string, todoListID: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, newTitle, todoListID}\r\n}","import React from 'react';\r\nimport s from './App.module.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodoListActionCreator,\r\n    changeTodolistFilterActionCreator,\r\n    changeTodoListTitleActionCreator,\r\n    removeTodoListActionCreator\r\n} from \"./store/todolists-reducer\";\r\nimport {\r\n    addTaskActionCreator,\r\n    changeTaskStatusActionCreator,\r\n    changeTaskTitleActionCreator,\r\n    removeTaskActionCreator\r\n} from \"./store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\nimport {TasksStateType} from \"./App\";\r\n\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed'\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        dispatch(removeTaskActionCreator(taskID, todoListID))\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        dispatch(addTaskActionCreator(title, todoListID))\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, newIsDone: boolean, todoListID: string) {\r\n        dispatch(changeTaskStatusActionCreator(taskID, newIsDone, todoListID))\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, newTitle: string, todoListID: string) {\r\n        dispatch(changeTaskTitleActionCreator(taskID, newTitle, todoListID))\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        dispatch(removeTodoListActionCreator(todoListID))\r\n    }\r\n\r\n    function addTodoList(newTitle: string) {\r\n        let action = addTodoListActionCreator(newTitle)\r\n        dispatch(action)\r\n    }\r\n\r\n    function changeTodoListFilter(filterValue: FilterValuesType, todoListID: string) {\r\n        dispatch(changeTodolistFilterActionCreator(filterValue, todoListID))\r\n    }\r\n\r\n    function changeTodoListTitle(newTitle: string, todoListID: string) {\r\n        dispatch(changeTodoListTitleActionCreator(newTitle, todoListID))\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tdl => {\r\n\r\n        let tasksForTodolist = tasks[tdl.id];\r\n\r\n        if (tdl.filter === \"Active\") {\r\n            tasksForTodolist = tasks[tdl.id].filter(t => !t.isDone);\r\n        }\r\n        if (tdl.filter === \"Completed\") {\r\n            tasksForTodolist = tasks[tdl.id].filter(t => t.isDone);\r\n        }\r\n\r\n        return (\r\n            <Grid item key={tdl.id}>\r\n                <Paper style={{padding: '20px'}} elevation={5}>\r\n                    <Todolist\r\n                        key={tdl.id}\r\n                        todoListID={tdl.id}\r\n                        title={tdl.title}\r\n                        filter={tdl.filter}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                        changeTaskTitle={changeTaskTitle}/>\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className={s.app}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todoListsReducer} from \"./todolists-reducer\";\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppWithRedux from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport { store } from './store/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}