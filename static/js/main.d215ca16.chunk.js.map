{"version":3,"sources":["components/EditableSpan/EditableSpan.module.css","api/todoLists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodoListsList/TodoList/todolists-reducer.ts","features/TodoListsList/TodoList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodoListsList/TodoList/Task/Task.tsx","features/TodoListsList/TodoList/TodoList.tsx","features/TodoListsList/TodoListsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx","app/App.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","todoListTitle","post","title","todoListId","delete","put","taskTitle","taskId","model","authAPI","email","password","rememberMe","captcha","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","changeTaskEntityStatusAC","todoListID","entityStatus","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","startDate","priority","deadline","description","res","resultCode","updateTaskAC","catch","console","log","AddItemForm","React","memo","props","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","onClickHandler","trim","TextField","onChange","e","currentTarget","onKeyPress","key","variant","size","helperText","label","IconButton","color","onClick","PostAdd","fontSize","EditableSpan","titleTdl","changeTitle","editMode","setEditMode","setTitle","onEditMode","offEditMode","onBlur","autoFocus","onDoubleClick","className","s","Task","removeTask","changeTaskTitle","changeTaskStatus","changeTaskTitleHandler","useCallback","Delete","Checkbox","checked","Completed","New","isDone","TodoList","changeTodoListFilter","addTask","changeTodoListTitle","removeTodoList","filter","useDispatch","useEffect","setTasksAC","items","fetchTasksTC","tasksForTodolist","TaskJSXElements","map","onClickHandlerAll","onClickHandlerActive","onClickHandlerCompleted","addTaskInTodoList","changeTodolistTitle","style","listStyle","paddingLeft","Button","margin","TodoListsList","todoLists","useSelector","state","auth","taskID","removeTaskAC","removeTaskTC","item","addTaskTC","newTitle","changeTodoListEntityStatusAC","removeTodoListAC","removeTodoListTC","addTodoList","todoList","filterValue","changeTodolistFilterAC","changeTodoListTitleAC","changeTodoListTitleTC","todoListsComponents","tdl","Grid","Paper","padding","elevation","container","spacing","to","Alert","forwardRef","ref","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","getFieldProps","touched","FormControlLabel","control","handleChange","name","theme","createTheme","palette","secondary","pink","App","logoutHandler","ThemeProvider","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","from","top","CircularProgress","rootReducer","combineReducers","action","stateCopy","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d215ca16.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"disabled\":\"EditableSpan_disabled__12j84\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e48f586f-eae5-4a76-8ed1-bdd525d79043'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todoListsAPI = {\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoListType>>(`todo-lists`)\r\n    },\r\n    createTodoList(todoListTitle: string) {\r\n        return instance.post<{ title: string }, { data: ResponseType<{ item: TodoListType }> }>(`todo-lists`, {title: todoListTitle})\r\n    },\r\n    deleteTodoList(todoListId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}`)\r\n    },\r\n    updateTodoList(todoListId: string, todoListTitle: string) {\r\n        return instance.put<{ title: string }, { data: ResponseType }>(`todo-lists/${todoListId}`, {title: todoListTitle})\r\n    },\r\n    getTasks(todoListId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`)\r\n    },\r\n    createTask(todoListId: string, taskTitle: string) {\r\n        return instance.post<{ title: string }, { data: ResponseType<{ item: TaskType }> }>(`todo-lists/${todoListId}/tasks`, {title: taskTitle})\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todoListId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, { data: ResponseType<{ item: TaskType }> }>(`todo-lists/${todoListId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<{ data: MeParamsType }>>('auth/me')\r\n    },\r\n    login({ email, password, rememberMe, captcha }: LoginParamsType) {\r\n        return instance.post<LoginParamsType, { data: ResponseType<{ userId: string}> }>('/auth/login', {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type MeParamsType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate?: string\r\n    order?: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: string\r\n    addedDate: string\r\n}\r\n\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ResponseType} from \"../api/todoLists-api\";\r\nimport { Dispatch } from 'redux';\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todoLists-api\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\":\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n//thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError<{ userId: string }>(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport type SetISLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType =\r\n    SetISLoggedInActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todoLists-api\";\r\nimport {setIsLoggedInAC, SetISLoggedInActionType} from \"../features/Login/auth-reducer\";\r\n\r\nconst initialState = {\r\n    status: 'succeeded' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\":\r\n            return {...state, status: action.status};\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-APP-INITIALIZED\":\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setIsInitializedAC = (value: boolean) => ({type: 'APP/SET-APP-INITIALIZED', value} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    authAPI.me()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n\r\n            }\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\ntype ActionsType =\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetISLoggedInActionType\r\n    | ReturnType<typeof setIsInitializedAC>","import {Dispatch} from \"redux\";\r\nimport {todoListsAPI, TodoListType} from \"../../../api/todoLists-api\";\r\nimport {\r\n    RequestStatusType,\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from \"../../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodoListDomainType> = initialState, action: TodoListsActionsType): Array<TodoListDomainType> => {\r\n\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tdl => tdl.id !== action.todoListID)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todoList, filter: \"All\", entityStatus: 'idle'}, ...state]\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tdl => tdl.id === action.todoListID ? {...tdl, filter: action.filterValue} : tdl)\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tdl => tdl.id === action.todoListID ? {...tdl, title: action.newTitle} : tdl)\r\n        case \"SET-TODOLISTS\":\r\n            return action.todoLists.map(tdl => ({...tdl, filter: \"All\", entityStatus: 'idle'}))\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tdl => tdl.id === action.todoListID ? {...tdl, entityStatus: action.entityStatus} : tdl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodoListAC = (todoListID: string) =>\r\n    ({type: 'REMOVE-TODOLIST', todoListID} as const)\r\nexport const addTodoListAC = (todoList: TodoListType) =>\r\n    ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const changeTodolistFilterAC = (filterValue: FilterValuesType, todoListID: string) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', filterValue, todoListID} as const)\r\nexport const changeTodoListTitleAC = (newTitle: string, todoListID: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', newTitle, todoListID} as const)\r\nexport const setTodoListsAC = (todoLists: Array<TodoListType>) =>\r\n    ({type: 'SET-TODOLISTS', todoLists} as const)\r\nexport const changeTodoListEntityStatusAC = (todoListID: string, entityStatus: RequestStatusType) =>\r\n    ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', todoListID, entityStatus} as const)\r\n\r\n// thunks\r\nexport const fetchTodoListsTC = () => (dispatch: Dispatch<TodoListsActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todoListsAPI.getTodoLists()\r\n        .then((res) => {\r\n            dispatch(setTodoListsAC(res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTodoListTC = (todoListTitle: string) => (dispatch: Dispatch<TodoListsActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todoListsAPI.createTodoList(todoListTitle)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError<{item: TodoListType}>(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTodoListTC = (todoListID: string) => (dispatch: Dispatch<TodoListsActionsType>) => {\r\n    dispatch(changeTodoListEntityStatusAC(todoListID, 'loading'))\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todoListsAPI.deleteTodoList(todoListID)\r\n        .then(() => {\r\n            dispatch(removeTodoListAC(todoListID))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const changeTodoListTitleTC = (todoListID: string, todoListTitle: string) => (dispatch: Dispatch<TodoListsActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todoListsAPI.updateTodoList(todoListID, todoListTitle)\r\n        .then(() => {\r\n            dispatch(changeTodoListTitleAC(todoListTitle, todoListID))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed';\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoListAC>\r\nexport type AddTodoListActionType = ReturnType<typeof addTodoListAC>\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\nexport type ChangeTodoListEntityStatusActionType = ReturnType<typeof changeTodoListEntityStatusAC>\r\ntype TodoListsActionsType =\r\n    | RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | SetTodoListsActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ChangeTodoListEntityStatusActionType","import {AddTodoListActionType, RemoveTodoListActionType, SetTodoListsActionType} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todoListsAPI, UpdateTaskModelType} from \"../../../api/todoLists-api\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {\r\n    RequestStatusType,\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from \"../../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todoListID]: state[action.todoListID].filter(task => task.id !== action.taskId)};\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]].map(task => ({\r\n                    ...task,\r\n                    entityStatus: 'idle'\r\n                }))\r\n            };\r\n        case \"UPDATE-TASK\":\r\n            return {\r\n                ...state, [action.todoListID]: state[action.todoListID].map(\r\n                    task => task.id === action.taskId ? {...task, ...action.model} : task)\r\n            };\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todoList.id]: []};\r\n        case \"REMOVE-TODOLIST\":\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListID]\r\n            return stateCopy;\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todoLists.forEach(tdl => stateCopy[tdl.id] = [])\r\n            return stateCopy;\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todoListID]: action.tasks.map(task => ({...task, entityStatus: 'idle'}))}\r\n        case \"CHANGE-TASK-ENTITY-STATUS\":\r\n            return {\r\n                ...state, [action.todoListID]: state[action.todoListID].map(\r\n                    task => task.id === action.taskId ? {...task, entityStatus: action.entityStatus} : task)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todoListID: string) =>\r\n    ({type: 'REMOVE-TASK', todoListID, taskId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListID: string) =>\r\n    ({type: 'UPDATE-TASK', taskId, model, todoListID} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todoListID: string) =>\r\n    ({type: 'SET-TASKS', tasks, todoListID} as const)\r\nexport const changeTaskEntityStatusAC = (taskId: string, todoListID: string, entityStatus: RequestStatusType) =>\r\n    ({type: 'CHANGE-TASK-ENTITY-STATUS', taskId, todoListID, entityStatus} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todoListID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todoListsAPI.getTasks(todoListID)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todoListID))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (todoListID: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(changeTaskEntityStatusAC(taskId, todoListID, 'loading'))\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todoListsAPI.deleteTask(todoListID, taskId)\r\n        .then(() => {\r\n            dispatch(removeTaskAC(taskId, todoListID))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n            dispatch(changeTaskEntityStatusAC(taskId, todoListID, 'succeeded'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (todoListID: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todoListsAPI.createTask(todoListID, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError<{ item: TaskType }>(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (todoListID: string, taskId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        dispatch(changeTaskEntityStatusAC(taskId, todoListID, 'loading'))\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodoList = allTasksFromState[todoListID]\r\n        const task = tasksForCurrentTodoList.find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.log('tasks not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        todoListsAPI.updateTask(todoListID, taskId, apiModel)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, apiModel, todoListID))\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n                    dispatch(changeTaskEntityStatusAC(taskId, todoListID, 'succeeded'))\r\n                } else {\r\n                    handleServerAppError<{ item: TaskType }>(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<DomainTaskType>\r\n\r\n}\r\nexport type DomainTaskType = TaskType & { entityStatus: RequestStatusType }\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodoListsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ReturnType<typeof changeTaskEntityStatusAC>","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {PostAdd} from \"@mui/icons-material\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (newTaskTitle: string) => void\r\n    disabled?: boolean\r\n}\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo((props) => {\r\n\r\n    const {\r\n        addItem,\r\n        disabled\r\n    } = props\r\n\r\n        const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n        const [error, setError] = useState<string | null>(null)\r\n\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setNewTaskTitle(e.currentTarget.value)\r\n        }\r\n\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (error !== null) {\r\n                setError(null)\r\n            }\r\n            if (e.key === 'Enter') {\r\n                onClickHandler()\r\n            }\r\n        }\r\n\r\n        const onClickHandler = () => {\r\n            if (newTaskTitle.trim() !== '') {\r\n                addItem(newTaskTitle.trim())\r\n                setNewTaskTitle('')\r\n            } else {\r\n                setError('Title is required')\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <TextField value={newTaskTitle}\r\n                           onChange={onChangeHandler}\r\n                           onKeyPress={onKeyPressHandler}\r\n                           variant={'outlined'}\r\n                           size={'small'}\r\n                           error={!!error}\r\n                           helperText={error && 'Title is required'}\r\n                           label={'Title'}\r\n                           disabled={disabled}/>\r\n                <IconButton size={'small'}\r\n                            color={'primary'}\r\n                            onClick={onClickHandler}\r\n                            disabled={disabled}>\r\n                    <PostAdd fontSize={'large'}/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n)","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport TextField from '@mui/material/TextField';\r\nimport s from './EditableSpan.module.css'\r\n\r\ntype EditableSpanPropsType = {\r\n    titleTdl: string\r\n    changeTitle: (title: string) => void\r\n    disabled: boolean\r\n}\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((props) => {\r\n\r\n        const {\r\n            titleTdl,\r\n            changeTitle,\r\n            disabled\r\n        } = props\r\n\r\n        const [editMode, setEditMode] = useState<boolean>(false);\r\n        const [title, setTitle] = useState<string>(titleTdl)\r\n\r\n        const onEditMode = () => setEditMode(true)\r\n        const offEditMode = () => {\r\n            title ? changeTitle(title) : setTitle(titleTdl)\r\n            setEditMode(false)\r\n        }\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setTitle(e.currentTarget.value)\r\n        }\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === 'Enter') {\r\n                offEditMode();\r\n            }\r\n        }\r\n\r\n        return (\r\n            editMode\r\n                ? <TextField value={title}\r\n                             onChange={onChangeHandler}\r\n                             onBlur={offEditMode}\r\n                             onKeyPress={onKeyPressHandler}\r\n                             autoFocus\r\n                             disabled={disabled}/>\r\n                : <>\r\n                    {\r\n                        disabled\r\n                            ? <span onDoubleClick={onEditMode} className={s.disabled}>{titleTdl}</span>\r\n                            : <span onDoubleClick={onEditMode}>{titleTdl}</span>\r\n                    }\r\n                </>\r\n\r\n        )\r\n    }\r\n)","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport s from \"../../../../app/App.module.css\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {TaskStatuses} from \"../../../../api/todoLists-api\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport {DomainTaskType} from \"../tasks-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todoListID: string) => void\r\n    todoListID: string\r\n    task: DomainTaskType\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\r\n\r\n    const {\r\n        removeTask,\r\n        changeTaskTitle,\r\n        changeTaskStatus,\r\n        todoListID,\r\n        task,\r\n    } = props\r\n\r\n    const onClickHandler = () => removeTask(task.id, todoListID)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        changeTaskStatus(task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todoListID)\r\n    }\r\n\r\n    const changeTaskTitleHandler = useCallback((title: string) => {\r\n        changeTaskTitle(task.id, title, todoListID)\r\n    }, [changeTaskTitle, task.id, todoListID])\r\n\r\n    return (\r\n        <li key={task.id}>\r\n            <IconButton size={'small'}\r\n                        color={'secondary'}\r\n                        onClick={onClickHandler}\r\n                        disabled={task.entityStatus === 'loading'}>\r\n                <Delete fontSize={'small'}/>\r\n            </IconButton>\r\n            <Checkbox checked={props.task.status === TaskStatuses.Completed}\r\n                      onChange={onChangeHandler}\r\n                      size={'small'}\r\n                      color={'primary'}\r\n                      disabled={task.entityStatus === 'loading'}/>\r\n            <span className={task.status === TaskStatuses.Completed ? s.isDone : ''}>\r\n                <EditableSpan titleTdl={task.title}\r\n                              changeTitle={changeTaskTitleHandler}\r\n                              disabled={task.entityStatus === 'loading'}/>\r\n            </span>\r\n        </li>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {DomainTaskType, fetchTasksTC} from \"./tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TaskStatuses} from \"../../../api/todoLists-api\";\r\nimport {FilterValuesType} from \"./todolists-reducer\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\nexport type TodoListPropsType = {\r\n    titleTdl: string\r\n    tasks: Array<DomainTaskType>\r\n    changeTodoListFilter: (filterValue: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTodoListTitle: (newTitle: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    todoListID: string\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListPropsType> = React.memo((props) => {\r\n\r\n        const {\r\n            titleTdl,\r\n            tasks,\r\n            changeTodoListFilter,\r\n            addTask,\r\n            changeTodoListTitle,\r\n            removeTask,\r\n            changeTaskTitle,\r\n            changeTaskStatus,\r\n            removeTodoList,\r\n            filter,\r\n            entityStatus,\r\n            todoListID,\r\n        } = props\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        useEffect(() => {\r\n            dispatch(fetchTasksTC(todoListID))\r\n        }, [dispatch, todoListID])\r\n\r\n        let tasksForTodolist = tasks\r\n\r\n        if (filter === \"Active\") {\r\n            tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New);\r\n        }\r\n        if (filter === \"Completed\") {\r\n            tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n        }\r\n\r\n        const TaskJSXElements = tasksForTodolist.map(t =>\r\n            <Task removeTask={removeTask}\r\n                  changeTaskTitle={changeTaskTitle}\r\n                  changeTaskStatus={changeTaskStatus}\r\n                  todoListID={todoListID}\r\n                  task={t}\r\n                  key={t.id}/>\r\n        )\r\n\r\n        const onClickHandlerAll = useCallback(() => {\r\n            changeTodoListFilter(\"All\", todoListID)\r\n        }, [changeTodoListFilter, todoListID])\r\n\r\n        const onClickHandlerActive = useCallback(() => {\r\n            changeTodoListFilter(\"Active\", todoListID)\r\n        }, [changeTodoListFilter, todoListID])\r\n\r\n        const onClickHandlerCompleted = useCallback(() => {\r\n            changeTodoListFilter(\"Completed\", todoListID)\r\n        }, [changeTodoListFilter, todoListID])\r\n\r\n        const onClickHandlerRemoveTodoList = () => {\r\n            removeTodoList(todoListID)\r\n        }\r\n\r\n        const addTaskInTodoList = useCallback((title: string) => {\r\n            addTask(title, todoListID)\r\n        }, [addTask, todoListID])\r\n\r\n        const changeTodolistTitle = useCallback((title: string) => {\r\n            changeTodoListTitle(title, todoListID)\r\n        }, [changeTodoListTitle, todoListID])\r\n\r\n        return (\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan titleTdl={titleTdl} changeTitle={changeTodolistTitle} disabled={entityStatus === 'loading'}/>\r\n                    <IconButton size={'small'}\r\n                                color={'inherit'}\r\n                                onClick={onClickHandlerRemoveTodoList}\r\n                                disabled={entityStatus === 'loading'}>\r\n                        <Delete fontSize={'medium'}/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTaskInTodoList} disabled={entityStatus === 'loading'}/>\r\n                <ul style={{listStyle: 'none', paddingLeft: '0'}}>\r\n                    {TaskJSXElements}\r\n                </ul>\r\n                <Button variant={\"contained\"}\r\n                        size={\"small\"}\r\n                        color={filter === 'All' ? 'primary' : 'secondary'}\r\n                        onClick={onClickHandlerAll}>All</Button>\r\n                <Button variant={\"contained\"}\r\n                        size={\"small\"}\r\n                        color={filter === 'Active' ? 'primary' : 'secondary'}\r\n                        style={{margin: '0 3px'}}\r\n                        onClick={onClickHandlerActive}>Active</Button>\r\n                <Button variant={\"contained\"}\r\n                        size={\"small\"}\r\n                        color={filter === 'Completed' ? 'primary' : 'secondary'}\r\n                        onClick={onClickHandlerCompleted}>Completed</Button>\r\n            </div>\r\n        );\r\n    }\r\n)\r\n\r\n\r\n\r\n","import {\r\n    addTodoListTC,\r\n    changeTodolistFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodoListTC, TodoListDomainType\r\n} from \"./TodoList/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"./TodoList/tasks-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {TaskStatuses} from \"../../api/todoLists-api\";\r\nimport {TodoList} from \"./TodoList/TodoList\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const TodoListsList = () => {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodoListsTC())\r\n    }, [dispatch, isLoggedIn])\r\n\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTaskTC(todoListID, taskID))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskTC(todoListID, title))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, status: TaskStatuses, todoListID: string) => {\r\n        dispatch(updateTaskTC(todoListID, taskID, {status}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskID: string, newTitle: string, todoListID: string) => {\r\n        dispatch(updateTaskTC(todoListID, taskID, {title: newTitle}))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        dispatch(removeTodoListTC(todoListID))\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((newTitle: string) => {\r\n        dispatch(addTodoListTC(newTitle))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListFilter = useCallback((filterValue: FilterValuesType, todoListID: string) => {\r\n        dispatch(changeTodolistFilterAC(filterValue, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string, todoListID: string) => {\r\n        dispatch(changeTodoListTitleTC(todoListID, newTitle))\r\n    }, [dispatch])\r\n\r\n    const todoListsComponents = todoLists.map(tdl => {\r\n\r\n        let tasksForTodolist = tasks[tdl.id];\r\n\r\n        return (\r\n            <Grid item key={tdl.id}>\r\n                <Paper style={{padding: '20px'}} elevation={5}>\r\n                    <TodoList\r\n                        key={tdl.id}\r\n                        todoListID={tdl.id}\r\n                        titleTdl={tdl.title}\r\n                        filter={tdl.filter}\r\n                        entityStatus={tdl.entityStatus}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'login'} />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px 0'}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={5}>\r\n                {todoListsComponents}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}","import MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be at least 3 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noreferrer\"> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}/>\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}/>\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={\r\n                                              <Checkbox\r\n                                                  onChange={formik.handleChange}\r\n                                                  checked={formik.values.rememberMe}\r\n                                                  name={'rememberMe'}/>}\r\n                        />\r\n                        <Button type={'submit'}\r\n                                variant={'contained'}\r\n                                color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport s from './App.module.css';\r\nimport {TodoListsList} from \"../features/TodoListsList/TodoListsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {createTheme, ThemeProvider} from '@mui/material/styles';\r\nimport pink from '@mui/material/colors/pink';\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        secondary: pink,\r\n    },\r\n});\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className={s.app}>\r\n                <ErrorSnackbar/>\r\n                <ThemeProvider theme={theme}>\r\n                    <AppBar position=\"static\">\r\n                        <Toolbar style={{justifyContent: 'space-between'}}>\r\n                            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                                <Menu/>\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\">\r\n                                TodoLists\r\n                            </Typography>\r\n                            { isLoggedIn && <Button variant={\"outlined\"}\r\n                                                   color=\"inherit\"\r\n                                                   onClick={logoutHandler}>Logout</Button> }\r\n                        </Toolbar>\r\n                        {status === 'loading' && <LinearProgress\r\n                            color=\"secondary\"/>}\r\n                    </AppBar>\r\n                    <Container fixed>\r\n                        <Switch>\r\n                            <Route exact path={'/'} render={() => <TodoListsList/>}/>\r\n                            <Route path={'/login'} render={() => <Login/>}/>\r\n                            <Route path={'/404'}\r\n                                   render={() => <h1 style={{textAlign: \"center\"}}>404: PAGE NOT FOUND</h1>}/>\r\n                            <Redirect from={'*'} to={'/404'}/>\r\n                        </Switch>\r\n                    </Container>\r\n                </ThemeProvider>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"../features/TodoListsList/TodoList/tasks-reducer\";\r\nimport {todoListsReducer} from \"../features/TodoListsList/TodoList/todolists-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./app/App\";\nimport {Provider} from \"react-redux\";\nimport { store } from './app/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"App_isDone__Haoe4\"};"],"sourceRoot":""}